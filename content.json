[{"title":"JavaScript深入之call、apply、bind的模拟实现","date":"2020-06-14T16:00:00.000Z","path":"2020/06/15/SimulateCallAndApplyAndBind/","text":"call call() 方法在使用一个指定的 this 值和若干个指定的参数值的前提下调用某个函数或方法。 注意几点 call 改变了 this 的指向。this 参数可以传 null，当为 null 的时候，视为指向 window 函数执行了 call 函数还能给定参数执行函数，传入的参数不确定 函数可以有返回值 代码如下 1234567891011121314151617181920212223 Function.prototype.call2 &#x3D; function (context &#x3D; window, ...args) &#123; context &#x3D; context || window; &#x2F;&#x2F; 从this中获取调用call2的函数 const fn &#x3D; this; context.fn &#x3D; fn; &#x2F;&#x2F; 获取传入的参数 &#x2F;&#x2F; 可以有返回值 参数数组放到要执行的函数的参数里面去 const result &#x3D; context.fn(...args); delete context.fn; return result;&#125;function bar (name, age) &#123; console.log(this.a);&#125;let obj &#x3D; &#123; a: &#39;obj&#39;&#125;bar.call2(obj, &#39;zhp&#39;, 18); apply apply实现基本与call一致 代码如下 123456789101112131415161718192021222324Function.prototype.apply2 &#x3D; function (context &#x3D; window, arr) &#123; context &#x3D; context || window; const fn &#x3D; this; context.fn &#x3D; fn; let result; if (!arr) &#123; result &#x3D; context.fn(); &#125;else &#123; const args &#x3D; arr.map((item, index) &#x3D;&gt; &#96;arr[$&#123;index&#125;]&#96;); result &#x3D; eval(&#39;context.fn(&#39; + args + &#39;)&#39;); &#125; delete context.fn return result;&#125;function bar (name, age) &#123; console.log(this.a, name,age);&#125;let obj &#x3D; &#123; a: &#39;obj&#39;&#125;bar.apply2(obj, [&#39;zhp&#39;, 18]) bind bind() 方法会创建一个新函数。当这个新函数被调用时，bind() 的第一个参数将作为它运行时的 this，之后的一序列参数将会在传递的实参前传入作为它的参数。(来自于 MDN ) bind函数特点： 返回一个函数 可以传入参数 代码如下 12345678910111213141516171819202122232425262728293031323334 Function.prototype.bind2 &#x3D; function (context &#x3D; window, ...args) &#123; context &#x3D; context || window; &#x2F;&#x2F; 调用bind的必须是函数 if (typeof this !&#x3D;&#x3D; &quot;function&quot;) &#123; throw new Error(&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;); &#125; const fn &#x3D; this; &#x2F;&#x2F; 通过一个空函数来进行中转： const fNOP &#x3D; function () &#123;&#125;; const foundFn &#x3D; function (...subArgs) &#123; &#x2F;&#x2F; 当 bind 返回的函数作为构造函数的时候，bind 时指定的 this 值会失效，但传入的参数依然生效。 &#x2F;&#x2F; 当作为构造函数时，this 指向实例，fn 指向绑定函数 &#x2F;&#x2F; 当作为普通函数时，this 指向 window，fn 指向绑定函数 context &#x3D; this instanceof fn ? this: context; return fn.call(context, ...args, ...subArgs); &#125; fNOP.prototype &#x3D; this.prototype foundFn.prototype &#x3D; new fNOP(); return foundFn;&#125;function bar (name,age) &#123; console.log(this.a, name,age);&#125;let obj &#x3D; &#123; a: &#39;obj&#39;&#125;const returnFn &#x3D; bar.bind2(obj, &#39;zhp&#39;);const res &#x3D; returnFn(18);&#x2F;&#x2F; const res &#x3D; new returnFn(18);console.log(res); 参考连接：JavaScript深入之call和apply的模拟实现JavaScript深入之bind的模拟实现","tags":[{"name":"JavaScript深入之call、apply、bind的模拟实现","slug":"JavaScript深入之call、apply、bind的模拟实现","permalink":"http://yoursite.com/tags/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8Bcall%E3%80%81apply%E3%80%81bind%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"}]},{"title":"github-and-hexo","date":"2020-05-31T14:34:23.715Z","path":"2020/05/31/github-and-hexo/","text":"","tags":[]},{"title":"MarkDown语法","date":"2020-05-30T16:00:00.000Z","path":"2020/05/31/markdown/","text":"Markdown 致力于使阅读和创作文档变得容易.Markdown 完全由标点符号组成, 这些标点经过仔细挑选以使他们看上去和表达的含义相同. 例如, 星号标记的单词就像 强调. 列表就像是列表. 如果你使用过 email 的话, 就连块引用都像引用的文本段落. 特殊字符如&lt;,&amp;等会自动转义,这使得用 Markdown 来写 HTML 代码很容易 #~6#表示一级到六级标题 引用&gt; *、-、+无序列表，数字加句号有序列表，可以转义“.”来避免触发有序列表 三个*或-及以上数量生成水平线 两种链接形式：内联及引用 内联链接示例 1This is [an example](http:&#x2F;&#x2F;example.com&#x2F; &quot;Title&quot;) inline link. 引用链接示例，链接定义的名称可以包含字母,数字,空格,和标点符号,但它们不是大小写敏感的. 12This is [an example][id] reference-style link.[id]: http:&#x2F;&#x2F;example.com&#x2F; &quot;Optional Title Here&quot; 注意: Markdown.pl 1.0.1 有一个已知的问题就是不能用单引号来包围链接标题. （”Optional Title Here”： 为可选的链接标题） *与_作为强调标记，等同&lt;em&gt;标签包裹；**与__等同于&lt;strong&gt;标签包裹 123强调可以出现在单词中,例如un*frigging*believable 插入图片两种方式：内联及引用 内联方式 1![Alt text](&#x2F;path&#x2F;to&#x2F;img.jpg &quot;Optional title&quot;) 引用方式 12![Alt text][id][id]: url&#x2F;to&#x2F;image &quot;Optional title attribute&quot; Markdown 没有语法指定图片尺寸; 如果需要指定图片尺寸, 可以使用 HTML &lt;img&gt;标签. 参考连接： 官网文档地址","tags":[{"name":"MarkDown语法","slug":"MarkDown语法","permalink":"http://yoursite.com/tags/MarkDown%E8%AF%AD%E6%B3%95/"}]},{"title":"Hello World","date":"2020-05-17T14:05:23.395Z","path":"2020/05/17/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]